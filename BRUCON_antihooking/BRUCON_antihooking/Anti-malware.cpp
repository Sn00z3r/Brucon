#include "Anti-Malware.h"


PVOID pTrampoline;
DWORD inlineHook() {
	__debugbreak();
	__debugbreak();
	__debugbreak();
	__debugbreak();
	__debugbreak();
	__debugbreak();
	__debugbreak();
	__debugbreak();
	printf("\n\n*** Anti-Malware: Malware detected! Process called NtCreateUserProcess\n*** Stopping execution!\n");
	
	int i = 5;
	int j = 5;
	int z = 5;
	return 0;
}

extern "C" __declspec(dllexport) PVOID initHook() {
	DWORD old_prot;
	PVOID address=GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtCreateUserProcess");
	PVOID inlinehook_address = (PVOID)inlineHook;
	DWORD64 jmp_hook = (DWORD64)inlinehook_address - (DWORD64)address;
	DWORD64 dwOriginalFirstDWORD=NULL;
	jmp_hook = (DWORD64)jmp_hook - 5;
	
	unsigned char bytes_jmp_hook[4] = { (jmp_hook & 0x00000000000000FF), (jmp_hook & 0x000000000000FF00)>>8,(jmp_hook & 0x0000000000FF0000)>>16,(jmp_hook & 0x00000000FF000000)>>24 };
	pTrampoline = VirtualAlloc(NULL, 17, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	
	DWORD dwHighTramp= (DWORD)((DWORD64)pTrampoline>>32);
	DWORD dwLowTramp= (DWORD)((DWORD64)pTrampoline);

	DWORD dwHighOrig = (DWORD)((DWORD64)address>>32);
	DWORD dwLowOrig = (DWORD)((DWORD64)address);
	dwLowOrig = (DWORD)((LPBYTE)address + 8);

	dwOriginalFirstDWORD = *reinterpret_cast<DWORD64 *>(address);
	VirtualProtect(address, sizeof(DWORD64), PAGE_EXECUTE_READWRITE, &old_prot);
	*reinterpret_cast<char *>(address) = 0xe9;
	*reinterpret_cast<char *>((LPBYTE)address + 1) = bytes_jmp_hook[0];
	*reinterpret_cast<char *>((LPBYTE)address + 2) = bytes_jmp_hook[1];
	*reinterpret_cast<char *>((LPBYTE)address + 3) = bytes_jmp_hook[2];
	*reinterpret_cast<char *>((LPBYTE)address + 4) = bytes_jmp_hook[3];
	*reinterpret_cast<char *>((LPBYTE)address + 5) = 0x00;
	*reinterpret_cast<char *>((LPBYTE)address + 6) = 0x00;
	*reinterpret_cast<char *>((LPBYTE)address + 7) = 0x00;
	VirtualProtect(address, sizeof(DWORD64), old_prot, &old_prot);
	
	/*
	ADD RSP,0x40
	PUSH DWORD
	MOV DWORD PTR [RSP+4],DWORD
	RET
	*/
	*reinterpret_cast<DWORD*>((LPBYTE)pTrampoline) = 0x40c48348;
	*reinterpret_cast<WORD*>((LPBYTE)pTrampoline + 4) = 0x5a41;
	*reinterpret_cast<WORD*>((LPBYTE)pTrampoline + 6) = 0x5941;
	*reinterpret_cast<WORD*>((LPBYTE)pTrampoline + 8) = 0x5841;
	*reinterpret_cast<char*>((LPBYTE)pTrampoline + 10) = 0x5a;
	*reinterpret_cast<char*>((LPBYTE)pTrampoline + 11) = 0x59;
	
	
	*reinterpret_cast<DWORD64 *>((LPBYTE)pTrampoline + 12)= dwOriginalFirstDWORD;
	*reinterpret_cast<char*>((LPBYTE)pTrampoline + 20) = 0xc3; // Stop execution, it will return without syscall
	*reinterpret_cast<DWORD*>((LPBYTE)pTrampoline + 21) = dwLowOrig;
	*reinterpret_cast<DWORD*>((LPBYTE)pTrampoline + 25) = 0x042444c7;
	*reinterpret_cast<DWORD*>((LPBYTE)pTrampoline + 29) = dwHighOrig;
	*reinterpret_cast<char*>((LPBYTE)pTrampoline + 33) = 0xc3;



	VirtualProtect(inlinehook_address, 0x200, PAGE_EXECUTE_READWRITE, &old_prot);
	///*
	//push rcx
	//push rdx
	//push r8
	//push r9
	//push r10
	//sub rsp, 0x40
	//*/
	*reinterpret_cast<char*>((LPBYTE)inlinehook_address) = 0x51;
	*reinterpret_cast<char*>((LPBYTE)inlinehook_address + 0x01) = 0x52;
	*reinterpret_cast<WORD*>((LPBYTE)inlinehook_address + 0x02) = 0x5041;
	*reinterpret_cast<WORD*>((LPBYTE)inlinehook_address + 0x04) = 0x5141;
	*reinterpret_cast<WORD*>((LPBYTE)inlinehook_address + 0x06) = 0x5241;
	*reinterpret_cast<DWORD*>((LPBYTE)inlinehook_address + 0x08) = 0x40ec8348;
	/*
	PUSH DWORD
	MOV DWORD PTR [RSP+4],DWORD
	RET
	*/
	*reinterpret_cast<char*>((LPBYTE)inlinehook_address + 0x18) = 0x68;
	*reinterpret_cast<DWORD*>((LPBYTE)inlinehook_address + 0x19) = dwLowTramp;
	*reinterpret_cast<DWORD*>((LPBYTE)inlinehook_address + 0x1D) = 0x042444c7;
	*reinterpret_cast<DWORD*>((LPBYTE)inlinehook_address + 0x21) = dwHighTramp;
	*reinterpret_cast<char*>((LPBYTE)inlinehook_address + 0x25) = 0xc3;


	VirtualProtect(inlinehook_address, 0x200, old_prot, &old_prot);

	printf("\nTrampoline address: 0x%" PRIx64, pTrampoline);
	printf("\nTrampoline address HIGH: 0x%" PRIx32, dwHighTramp);
	printf("\nTrampoline address low: 0x%" PRIx32, dwLowTramp);
	printf("\nInline hook address: 0x%" PRIx64, inlinehook_address);
	printf("\nNtCreateUserProcess address: 0x%" PRIx64, address);
	printf("\nOrginal DWORD64: 0x%" PRIx64 "\n", dwOriginalFirstDWORD);
	return address;
}





